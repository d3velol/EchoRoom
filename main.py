from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import User, init_db, PrisonUser
from messages_db import StoredMessage, init_messages_db
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated
import config
import random
import asyncio
import names
import time
import traceback
import json
from restricted_names import is_name_allowed
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

active_channels = set()

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
last_message_time = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏–π
message_mappings = {}  # {channel: {original_id: {user_id: message_id}}}

def owner_only(func):
    async def wrapper(message: types.Message):
        if message.from_user.id != config.OWNER_ID:
            await message.answer(
                "üö´ *–û—à–∏–±–∫–∞*: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                parse_mode="Markdown"
            )
            return
        return await func(message)
    return wrapper

def get_current_version():
    try:
        with open('version.txt', 'r') as f:
            return f.read().strip()
    except:
        return "1.0.0"

def generate_name():
    return f"{names.get_first_name()} {names.get_last_name()}"

def get_random_channel():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª"""
    if random.random() < config.CHANNEL_CREATION_CHANCE:
        new_channel = random.randint(config.MIN_CHANNEL, config.MAX_CHANNEL)
        active_channels.add(new_channel)
        return new_channel
    return random.choice(list(active_channels)) if active_channels else random.randint(config.MIN_CHANNEL, config.MAX_CHANNEL)

def get_display_name(user: User):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    display_name = user.custom_name if user.custom_name else user.name
    if user.emoji:
        display_name = f"{user.emoji} {display_name}"
    return display_name

def create_user_button(name, user=None):
    """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    markup = InlineKeyboardMarkup()
    display_name = get_display_name(user) if user else name
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏
    if name == "–°–∏—Å—Ç–µ–º–∞":
        callback_data = "system"
    elif name == "–í–ª–∞–¥–µ–ª–µ—Ü":
        callback_data = "owner"
    else:
        callback_data = "name"
        
    markup.add(InlineKeyboardButton(display_name, callback_data=callback_data))
    return markup

@dp.errors_handler()
async def errors_handler(update: types.Update, exception: Exception):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    """
    print(f"\n{'='*50}\n[ERROR] Unexpected error: {exception}")
    print(f"Update: {update}")
    print(traceback.format_exc())
    print(f"{'='*50}\n")
    return True

async def send_message(**kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        return await bot.send_message(**kwargs)
    except (BotBlocked, ChatNotFound, UserDeactivated) as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Failed to send message: {e}")
        print(f"Arguments: {kwargs}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        
        user_id = kwargs.get('chat_id')
        if user_id:
            user = User.get_user(user_id)
            if user:
                user.delete_instance()
            
            prison_user = PrisonUser.get_or_none(PrisonUser.user_id == user_id)
            if prison_user:
                prison_user.delete_instance()
        raise e
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Unexpected error while sending message: {e}")
        print(f"Arguments: {kwargs}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        raise e

async def start_channel_switchers():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    users = User.select()
    for user in users:
        asyncio.create_task(switch_channel(user.user_id))
    print(f"Started channel switchers for {len(list(users))} users")

async def switch_channel(user_id):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while True:
        wait_time = random.randint(config.SWITCH_TIME_MIN, config.SWITCH_TIME_MAX)
        await asyncio.sleep(wait_time)
        
        user = User.get_user(user_id)
        if user:
            prison_user = PrisonUser.get_or_none(PrisonUser.user_id == user_id)
            if prison_user:
                continue
                
            new_channel = get_random_channel()
            new_name = generate_name()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–º–µ–Ω–∏
            if not user.custom_name:
                user.name = new_name
            user.channel = new_channel
            user.save()
            
            try:
                await bot.send_message(
                    user_id,
                    f"üëÅ *–ú–æ—Ä–≥–Ω—É–≤*, —Ç—ã –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ `{new_channel}Hz`\n"
                    f"üé≠ *–¢–≤–æ—ë –∏–º—è*: `{get_display_name(user)}`",
                    parse_mode="Markdown",
                    reply_markup=create_user_button(new_name, user)
                )
            except Exception as e:
                print(f"\n{'='*50}")
                print(f"[ERROR] Failed to send channel switch message to {user_id}: {e}")
                print(traceback.format_exc())
                print(f"{'='*50}\n")

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        user = User.get_or_none(User.user_id == message.from_user.id)
        if not user:
            channel = get_least_populated_channel()
            name = generate_name()
            
            user = User.create(
                user_id=message.from_user.id,
                name=name,
                channel=channel,
                created_at=datetime.now()
            )
            
            channel_users = User.get_channel_users(channel)
            users_count = len(list(channel_users))
            
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
                f"üì° –¢–≤–æ–π –∫–∞–Ω–∞–ª: `{channel}Hz`\n"
                f"üë§ –¢–≤–æ—ë –∏–º—è: `{get_display_name(user)}`\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–Ω–∞–ª–µ: `{users_count}`\n\n"
                "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞",
                parse_mode="Markdown"
            )
        else:
            channel_users = User.get_channel_users(user.channel)
            users_count = len(list(channel_users))
            
            await message.answer(
                f"üì° –¢–≤–æ–π –∫–∞–Ω–∞–ª: `{user.channel}Hz`\n"
                f"üë§ –¢–≤–æ—ë –∏–º—è: `{get_display_name(user)}`\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–Ω–∞–ª–µ: `{users_count}`\n\n"
                "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await bot.send_message(
            config.OWNER_ID,
            f"‚ùå *Error in cmd_start*:\n"
            f"User ID: `{message.from_user.id}`\n"
            f"Error: `{str(e)}`\n"
            f"Traceback: ```\n{traceback.format_exc()}```",
            parse_mode="Markdown"
        )
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_start: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã*",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    try:
        current_version = get_current_version()
        base_commands = (
            f"*üì° –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {current_version}*\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ /name [–∏–º—è] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –∏–º—è\n"
            "‚Ä¢ /scan - –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã\n"
            "‚Ä¢ /goto [–∫–∞–Ω–∞–ª] - –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\n"
            "_–ö–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏_"
        )
        
        owner_commands = (
            "\n\n*üëë –ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:*\n\n"
            "‚Ä¢ /version [–Ω–æ–º–µ—Ä] [—Ç–µ–∫—Å—Ç] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ /broadcast [—Ç–µ–∫—Å—Ç] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "‚Ä¢ /zov [user_id] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç—é—Ä—å–º—É\n"
            "‚Ä¢ /unzov [user_id] - –û—Å–≤–æ–±–æ–¥–∏—Ç—å –∏–∑ —Ç—é—Ä—å–º—ã\n"
            "‚Ä¢ /emoji [user_id] [emoji] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            "‚Ä¢ /resetname [user_id] - –°–±—Ä–æ—Å–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è\n"
            "‚Ä¢ /del - –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
        )
        
        help_text = base_commands + (owner_commands if message.from_user.id == config.OWNER_ID else "")
        await message.answer(help_text, parse_mode="Markdown")
        
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_help: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–º–æ—â–∏.")

@dp.message_handler(commands=['scan'])
async def cmd_scan(message: types.Message):
    try:
        scan_results = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        channels = User.select(User.channel).distinct()
        
        for channel_record in channels:
            users = User.get_channel_users(channel_record.channel)
            user_count = len(list(users))
            
            scan_results.append(
                f"üëÅ –ö–∞–Ω–∞–ª: `{channel_record.channel}Hz`\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{user_count}`\n"
            )
        
        if scan_results:
            await message.answer(
                "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n" + "\n".join(scan_results),
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                "üòî *–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...*",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_scan: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏*", parse_mode="Markdown")

@dp.message_handler(commands=['goto', 'channel'])
async def cmd_goto(message: types.Message):
    if message.get_command() == '/channel':
        await message.answer(
            "‚ùóÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ /goto\n"
            "–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: `/channel –∫–∞–Ω–∞–ª`, `/goto –∫–∞–Ω–∞–ª`",
            parse_mode="Markdown"
        )
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/goto –∫–∞–Ω–∞–ª`",
                parse_mode="Markdown"
            )
            return
            
        channel = int(args[1])
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—é—Ä–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª
        if channel == config.PRISON_CHANNEL:
            await message.answer(
                random.choice(config.PRISON_MESSAGES),
                parse_mode="Markdown"
            )
            return
            
        if channel < config.MIN_CHANNEL or channel > config.MAX_CHANNEL:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–∞–Ω–∞–ª\n"
                f"–î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç `{config.MIN_CHANNEL}` –¥–æ `{config.MAX_CHANNEL}`",
                parse_mode="Markdown"
            )
            return
            
        user = User.get_user(user_id)
        if not user:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="Markdown"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª, –∏–º—è –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ
        if not user.custom_name:
            user.name = generate_name()
        user.channel = channel
        user.save()
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "üòå *–¢—ã –Ω–µ–Ω–∞–¥–æ–ª–≥–æ –∑–∞–∫—Ä—ã–ª –≥–ª–∞–∑–∞*...\n"
            f"_–ò –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ_ `{channel}Hz`",
            parse_mode="Markdown",
            reply_markup=create_user_button(user.name, user)
        )
            
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_goto: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã*",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['name', 'tag'])
async def cmd_name(message: types.Message):
    if message.get_command() == '/tag':
        await message.answer(
            "‚ùóÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /name\n"
            "–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: `/tag –Ω–∏–∫`, `/name –Ω–∏–∫`",
            parse_mode="Markdown"
        )
    try:
        args = message.text.split(maxsplit=1)
        if len(args) != 2:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –£–∫–∞–∂–∏—Ç–µ –∏–º—è\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/name –ù–æ–≤–æ–µ –ò–º—è`",
                parse_mode="Markdown"
            )
            return
            
        new_name = args[1]
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∏–º—è
        is_allowed, error_msg = is_name_allowed(new_name, user_id)
        if not is_allowed:
            await message.answer(error_msg, parse_mode="Markdown")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.get_or_none(User.user_id == user_id)
        if not user:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                parse_mode="Markdown"
            )
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        user.custom_name = new_name
        user.save()
        
        await message.answer(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è: `{new_name}`",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_name: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã*",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['resetname'])
@owner_only
async def cmd_resetname(message: types.Message):
    try:
        args = message.text.split()
        user_id = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ ID
            if len(args) != 2:
                await message.answer(
                    "‚ùå *–û—à–∏–±–∫–∞*: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ `/resetname user_id`\n"
                    "‚Ä¢ –û—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/resetname`",
                    parse_mode="Markdown"
                )
                return
            user_id = int(args[1])
            
        user = User.get_user(user_id)
        if not user:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="Markdown"
            )
            return
            
        user.custom_name = None
        user.save()
        
        await message.answer(
            "‚úÖ –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è —É–¥–∞–ª–µ–Ω–æ",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_resetname: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã*",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['emoji'])
@owner_only
async def cmd_emoji(message: types.Message):
    try:
        args = message.text.split()
        user_id = None
        emoji = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            if len(args) != 2:
                await message.answer(
                    "‚ùå *–û—à–∏–±–∫–∞*: –£–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/emoji üåü`",
                    parse_mode="Markdown"
                )
                return
            emoji = args[1]
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ ID
            if len(args) != 3:
                await message.answer(
                    "‚ùå *–û—à–∏–±–∫–∞*: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ `/emoji user_id emoji`\n"
                    "‚Ä¢ –û—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/emoji emoji`",
                    parse_mode="Markdown"
                )
                return
            user_id = int(args[1])
            emoji = args[2]
            
        user = User.get_user(user_id)
        if not user:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="Markdown"
            )
            return
            
        user.emoji = emoji
        user.save()
        
        await message.answer(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏: {emoji}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_emoji: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã*",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['version'])
@owner_only
async def cmd_version(message: types.Message):
    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/version –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç`",
                parse_mode="Markdown"
            )
            return
            
        version = args[1]
        text = args[2]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        with open('version.txt', 'w') as f:
            f.write(version)
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        update_message = (
            "üåü *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ!*\n\n"
            f"üì¶ –í–µ—Ä—Å–∏—è: `{version}`\n"
            "üìù –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:\n"
            f"{text}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–∏—Å—Ç–µ–º–∞"
        markup = create_user_button("–°–∏—Å—Ç–µ–º–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        try:
            await bot.send_message(
                chat_id=config.UPDATE_CHANNEL,
                text=update_message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"Failed to send update to channel: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users = User.select()
        sent_count = 0
        
        for user in users:
            try:
                await send_message(
                    chat_id=user.user_id,
                    text=update_message,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
                if user.user_id != message.from_user.id:  # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    sent_count += 1
            except Exception as e:
                print(f"Failed to send update to {user.user_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await message.answer(
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –≤ –∫–∞–Ω–∞–ª",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_version: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è*",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['broadcast', 'broad'])
@owner_only
async def cmd_broadcast(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)
        if len(args) != 2:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/broadcast —Ç–µ–∫—Å—Ç` –∏–ª–∏ `/broad —Ç–µ–∫—Å—Ç`\n\n"
                "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
                "`nn` - –∫–æ–¥\n"
                "*nn* - –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
                "_nn_ - –∫—É—Ä—Å–∏–≤\n"
                "~nn~ - –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π\n"
                "||nn|| - —Å–ø–æ–π–ª–µ—Ä\n"
                "@username - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                "`#ffffff` - —Ü–≤–µ—Ç (HEX)",
                parse_mode="Markdown"
            )
            return
            
        text = args[1]
        users = User.select()
        sent_count = 0
        markup = create_user_button("–í–ª–∞–¥–µ–ª–µ—Ü")
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ç–∏—Ä–µ –Ω–∞ –æ–±—ã—á–Ω–æ–µ
        text = text.replace('‚Äî', '-')
        
        for user in users:
            try:
                await bot.send_message(
                    user.user_id,
                    text,
                    parse_mode="Markdown",
                    reply_markup=markup,
                    disable_web_page_preview=False
                )
                sent_count += 1
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(config.BROADCAST_DELAY)
                
            except BotBlocked:
                print(f"Bot was blocked by user {user.user_id}, removing from database")
                user.delete_instance()
            except Exception as e:
                print(f"Failed to send broadcast to {user.user_id}: {e}")
                continue
                
        status_msg = await message.answer(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `{sent_count}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            parse_mode="Markdown"
        )
        asyncio.create_task(delete_message_after(status_msg, config.DELETE_STATS_AFTER))
            
    except Exception as e:
        await bot.send_message(
            config.OWNER_ID,
            f"‚ùå *Error in cmd_broadcast*:\n"
            f"Error: `{str(e)}`\n"
            f"Traceback: ```\n{traceback.format_exc()}```",
            parse_mode="Markdown"
        )
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_broadcast: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è*",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['zov'])
@owner_only
async def cmd_zov(message: types.Message):
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –£–∫–∞–∂–∏—Ç–µ user_id\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ `/zov user_id` _(–Ω–∞–≤—Å–µ–≥–¥–∞)_\n"
                "‚Ä¢ `/zov user_id 30m` _(–Ω–∞ 30 –º–∏–Ω—É—Ç)_\n"
                "‚Ä¢ `/zov user_id 2h` _(–Ω–∞ 2 —á–∞—Å–∞)_\n"
                "‚Ä¢ `/zov user_id 1d` _(–Ω–∞ 1 –¥–µ–Ω—å)_\n"
                "‚Ä¢ `/zov user_id –ø—Ä–∏—á–∏–Ω–∞` _(–Ω–∞–≤—Å–µ–≥–¥–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π)_\n"
                "‚Ä¢ `/zov user_id 30m –ø—Ä–∏—á–∏–Ω–∞` _(–Ω–∞ –≤—Ä–µ–º—è —Å –ø—Ä–∏—á–∏–Ω–æ–π)_",
                parse_mode="Markdown"
            )
            return

        user_id = int(args[1])
        until = None
        reason = None
        
        if len(args) > 2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–µ–º
            time_str = args[2].lower()
            if any(time_str.endswith(unit) for unit in ['m', 'h', 'd']):
                try:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                    multiplier = {'m': 60, 'h': 3600, 'd': 86400}
                    time_value = int(time_str[:-1])
                    time_unit = time_str[-1]
                    
                    if time_unit in multiplier:
                        until = int(time.time()) + (time_value * multiplier[time_unit])
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏—á–∏–Ω–∞ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏
                        if len(args) > 3:
                            reason = ' '.join(args[3:])
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø—Ä–∏—á–∏–Ω–æ–π
                    reason = ' '.join(args[2:])
            else:
                # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –≤—Ä–µ–º—è, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–∏—á–∏–Ω–∞
                reason = ' '.join(args[2:])
        
        user = User.get_user(user_id)
        if not user:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="Markdown"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        PrisonUser.create(
            user_id=user_id,
            reason=reason or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
            until=until
        )
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.channel = config.PRISON_CHANNEL
        user.save()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        status = []
        status.append(f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: `{get_display_name(user)}`")
        
        if until:
            time_left = until - int(time.time())
            hours = time_left // 3600
            minutes = (time_left % 3600) // 60
            status.append(f"‚è± *–í—Ä–µ–º—è*: `{hours}—á {minutes}–º`")
        else:
            status.append("‚è± *–í—Ä–µ–º—è*: `–Ω–∞–≤—Å–µ–≥–¥–∞`")
            
        if reason:
            status.append(f"üìù *–ü—Ä–∏—á–∏–Ω–∞*: `{reason}`")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "üòµ *–¢—ã –ø–æ—Ç–µ—Ä—è–ª —Å–æ–∑–Ω–∞–Ω–∏–µ*...\n"
            f"_–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –æ—á–Ω—É–ª—Å—è, —Ç—ã –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ_ `{config.PRISON_CHANNEL}Hz`...\n"
            "üíÄ *–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å*...",
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        await message.answer(
            f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—â–µ–Ω –≤ —Ç—é—Ä—å–º—É*\n\n" + 
            '\n'.join(status),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_zov: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã*",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['unzov'])
@owner_only
async def cmd_unzov(message: types.Message):
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/unzov user_id`",
                parse_mode="Markdown"
            )
            return
            
        user_id = int(args[1])
        prison_user = PrisonUser.get_or_none(PrisonUser.user_id == user_id)
        
        if not prison_user:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç—é—Ä—å–º–µ",
                parse_mode="Markdown"
            )
            return
            
        prison_user.delete_instance()
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª
        user = User.get_user(user_id)
        if user:
            channel = get_random_channel()
            user.channel = channel
            user.save()
            
            await bot.send_message(
                user_id,
                "üåü *–¢—ã –ø—Ä–∏—à–µ–ª –≤ —Å–µ–±—è*...\n"
                f"_–ò –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ_ `{channel}Hz`",
                parse_mode="Markdown"
            )
        
        await message.answer(
            "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_unzov: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã*",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['del'])
@owner_only
async def cmd_del(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        if not message.reply_to_message:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
                parse_mode="Markdown"
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = User.select()
        deleted_count = 0
        base_message_id = message.reply_to_message.message_id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i, user in enumerate(users):
            try:
                msg_id = base_message_id + i  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.delete_message(user.user_id, msg_id)
                deleted_count += 1
            except Exception as e:
                print(f"Failed to delete message {msg_id} for user {user.user_id}: {e}")
                continue
                    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        status_msg = await message.answer(
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: `{deleted_count}`",
            parse_mode="Markdown"
        )
        asyncio.create_task(delete_message_after(status_msg, config.DELETE_STATS_AFTER))
            
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in cmd_del: {e}")
        print(f"Message: {message.text}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è*",
            parse_mode="Markdown"
        )

@dp.message_handler(content_types=['text'])
async def handle_message(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        current_time = time.time()
        last_time = last_message_time.get(message.from_user.id, 0)
        if current_time - last_time < config.MESSAGE_DELAY:
            remaining = round(config.MESSAGE_DELAY - (current_time - last_time))
            await message.answer(
                f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ `{remaining}` —Å–µ–∫.",
                parse_mode="Markdown"
            )
            return
            
        # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_time[message.from_user.id] = current_time
        
        user = User.get_user(message.from_user.id)
        if not user:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                parse_mode="Markdown"
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—é—Ä—å–º—É
        prison_user = PrisonUser.get_or_none(PrisonUser.user_id == message.from_user.id)
        if prison_user:
            await message.answer(
                f"üöî –í—ã –≤ —Ç—é—Ä—å–º–µ –µ—â–µ `{prison_user.remaining_time}` —Å–µ–∫—É–Ω–¥",
                parse_mode="Markdown"
            )
            # –ï—Å–ª–∏ –≤ —Ç—é—Ä—å–º–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            last_message_time.pop(message.from_user.id, None)
            return
            
        channel_users = User.get_channel_users(user.channel)
        recipients_count = sum(1 for u in channel_users if u.user_id != message.from_user.id)
            
        if recipients_count == 0:
            status_msg = await message.answer(
                f"üì° –ù–∞ –∫–∞–Ω–∞–ª–µ `{user.channel}Hz` –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç...",
                parse_mode="Markdown"
            )
            asyncio.create_task(delete_message_after(status_msg, config.DELETE_STATS_AFTER))
            return

        markup = create_user_button(user.name, user)
        
        text = message.text
        reply_msg = None
        
        if message.reply_to_message:
            quoted_user = User.get_user(message.reply_to_message.from_user.id)
            quoted_name = quoted_user.get_display_name() if quoted_user else message.reply_to_message.from_user.first_name
            quoted_text = message.reply_to_message.text
            
            if "‚ï≠‚îÄ" in quoted_text:
                lines = quoted_text.split("\n")
                for i in range(len(lines)-1, -1, -1):
                    if not lines[i].startswith("‚ï≠‚îÄ") and not lines[i].startswith("‚ï∞"):
                        quoted_text = lines[i]
                        break
                        
            text_with_quote = (
                f"‚ï≠‚îÄ {quoted_name}\n"
                f"‚ï∞ {quoted_text}\n"
                f"\n"
                f"{text}"
            )
            reply_msg = message.reply_to_message

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        status_msg = await message.answer(
            "üì° *–û—Ç–ø—Ä–∞–≤–ª—è—é...*",
            parse_mode="Markdown"
        )
        
        start_time = time.time()
        tasks = []
        results = []

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        for channel_user in channel_users:
            if channel_user.user_id == message.from_user.id and reply_msg:
                task = bot.send_message(
                    channel_user.user_id,
                    text,
                    reply_to_message_id=reply_msg.message_id,
                    reply_markup=markup
                )
            else:
                task = bot.send_message(
                    channel_user.user_id,
                    text_with_quote if reply_msg else text,
                    reply_markup=markup
                )
            tasks.append(task)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        try:
            responses = await asyncio.gather(*tasks, return_exceptions=True)
            for i, response in enumerate(responses):
                if isinstance(response, Exception):
                    print(f"Failed to send message to {channel_users[i].user_id}: {response}")
                else:
                    results.append(f"{channel_users[i].user_id}:{response.message_id}")
        except Exception as e:
            print(f"Error in gather: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results:
            StoredMessage.save_message_with_timestamp(
                message.from_user.id,
                user.get_display_name(),
                results,
                text,
                int(time.time())
            )

        execution_time = int((time.time() - start_time) * 1000)
        time_str = f"{execution_time}ms" if execution_time < 1000 else f"{execution_time/1000:.1f}s"
        
        await status_msg.edit_text(
            f"üì° –¢–≤–æ–π —Å–∏–≥–Ω–∞–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª `{user.channel}Hz`\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: `{recipients_count}`\n"
            f"‚ö°Ô∏è –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: `{time_str}`",
            parse_mode="Markdown"
        )
        
        asyncio.create_task(delete_message_after(status_msg, config.DELETE_STATS_AFTER))

        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        channel_mapping = message_mappings.setdefault(user.channel, {})
        message_mapping = channel_mapping.setdefault(message.message_id, {})
        
        for result in results:
            if isinstance(result, types.Message):
                message_mapping[result.chat.id] = result.message_id

    except Exception as e:
        print(f"[ERROR] Error in handle_message: {e}")
        traceback.print_exc()
        try:
            await message.answer(
                f"üö´ *–û—à–∏–±–∫–∞*: {str(e)}",
                parse_mode="Markdown"
            )
        except:
            pass

async def delete_message_after(message: types.Message, delay: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except Exception as e:
        print(f"Failed to delete message: {e}")

@dp.callback_query_handler()
async def process_callback(callback_query: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        callback_data = callback_query.data
        
        if callback_data == "name":
            # –ö–Ω–æ–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback_query.answer(
                "–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                show_alert=True
            )
            
        elif callback_data == "system":
            # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.answer(
                "–≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                show_alert=True
            )
            
        elif callback_data == "owner":
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
            await callback_query.answer(
                "–≠—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                show_alert=True
            )
            
    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in process_callback: {e}")
        print(f"Callback data: {callback_query.data}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")

def get_least_populated_channel() -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–∏—Ö
        channels = {}
        for user in User.select():
            channels[user.channel] = channels.get(user.channel, 0) + 1
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        if channels:
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            min_channel = min(channels.items(), key=lambda x: x[1])[0]
            # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é CHANNEL_CREATION_CHANCE —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            if random.random() < config.CHANNEL_CREATION_CHANCE:
                return random.randint(config.MIN_CHANNEL, config.MAX_CHANNEL)
            return min_channel
            
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
        return random.randint(config.MIN_CHANNEL, config.MAX_CHANNEL)
        
    except Exception as e:
        print(f"Error in get_least_populated_channel: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª
        return random.randint(config.MIN_CHANNEL, config.MAX_CHANNEL)

@dp.message_handler(content_types=['photo', 'video', 'animation', 'document', 'media_group', 'sticker'])
async def handle_media(message: types.Message):
    try:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ MEDIA_ALLOWED_USERS
        start_time = time.time()
        user = User.get_user(message.from_user.id)
        if not user:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞*: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                parse_mode="Markdown"
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        current_time = time.time()
        last_time = last_message_time.get(message.from_user.id, 0)
        if current_time - last_time < config.MESSAGE_DELAY:
            await message.answer(
                f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ `{int(config.MESSAGE_DELAY - (current_time - last_time))}` —Å–µ–∫—É–Ω–¥",
                parse_mode="Markdown"
            )
            return

        # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_time[message.from_user.id] = current_time

        channel_users = User.get_channel_users(user.channel)
        recipients_count = sum(1 for u in channel_users if u.user_id != message.from_user.id)
            
        if recipients_count == 0:
            status_msg = await message.answer(
                f"üì° –ù–∞ –∫–∞–Ω–∞–ª–µ `{user.channel}Hz` –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç...",
                parse_mode="Markdown"
            )
            asyncio.create_task(delete_message_after(status_msg, config.DELETE_STATS_AFTER))
            return

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_msg = await message.answer(
            f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –∫–∞–Ω–∞–ª `{user.channel}Hz`\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: `{recipients_count}`",
            parse_mode="Markdown"
        )

        markup = create_user_button(user.name, user)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –∏ –ø–æ–¥–ø–∏—Å—å
        file_id = None
        caption = message.caption or ""
        media_type = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ file_id
        if message.sticker:
            file_id = message.sticker.file_id
            media_type = 'sticker'
        elif message.media_group_id:
            if message.photo:
                file_id = message.photo[-1].file_id
                media_type = 'photo'
            elif message.video:
                file_id = message.video.file_id
                media_type = 'video'
            elif message.document:
                file_id = message.document.file_id
                media_type = 'document'
        else:
            if message.photo:
                file_id = message.photo[-1].file_id
                media_type = 'photo'
            elif message.video:
                file_id = message.video.file_id
                media_type = 'video'
            elif message.animation:
                file_id = message.animation.file_id
                media_type = 'animation'
            elif message.document:
                file_id = message.document.file_id
                media_type = 'document'
            
        if not file_id:
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        tasks = []
        for channel_user in channel_users:
            async def send_with_delay(user_id):
                await asyncio.sleep(config.BROADCAST_DELAY)
                if media_type == 'sticker':
                    return await bot.send_sticker(user_id, file_id, reply_markup=markup)
                elif media_type == 'photo':
                    return await bot.send_photo(user_id, file_id, caption=caption, reply_markup=markup)
                elif media_type == 'video':
                    return await bot.send_video(user_id, file_id, caption=caption, reply_markup=markup)
                elif media_type == 'animation':
                    return await bot.send_animation(user_id, file_id, caption=caption, reply_markup=markup)
                elif media_type == 'document':
                    return await bot.send_document(user_id, file_id, caption=caption, reply_markup=markup)

            tasks.append(send_with_delay(channel_user.user_id))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        successful_sends = sum(1 for r in results if not isinstance(r, Exception))
        
        execution_time = int((time.time() - start_time) * 1000)
        time_str = f"{execution_time}ms" if execution_time < 1000 else f"{execution_time/1000:.1f}s"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_msg.edit_text(
            f"üì° –°–∏–≥–Ω–∞–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª `{user.channel}Hz`\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: `{successful_sends}/{recipients_count}`\n"
            f"‚ö°Ô∏è –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: `{time_str}`",
            parse_mode="Markdown"
        )
        
        asyncio.create_task(delete_message_after(status_msg, config.DELETE_STATS_AFTER))

    except Exception as e:
        print(f"\n{'='*50}")
        print(f"[ERROR] Error in handle_media: {e}")
        print(traceback.format_exc())
        print(f"{'='*50}\n")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞*",
            parse_mode="Markdown"
        )

@dp.message_handler(content_types=['message_reaction'])
async def handle_reaction(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–∫—Ü–∏–∏
        reaction = message.message_reaction
        if not reaction:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.get_user(message.from_user.id)
        if not user:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º mapping —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        channel_mapping = message_mappings.get(user.channel, {})
        if not channel_mapping:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º mapping –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_mapping = channel_mapping.get(message.message_id, {})
        if not message_mapping:
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for user_id, msg_id in message_mapping.items():
            try:
                await bot.set_message_reaction(
                    chat_id=user_id,
                    message_id=msg_id,
                    reaction=[types.ReactionType(type="emoji", emoji=reaction.emoji)]
                )
            except Exception as e:
                print(f"Failed to set reaction for user {user_id}: {e}")
                continue
                
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.set_message_reaction(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reaction=[types.ReactionType(type="emoji", emoji=reaction.emoji)]
            )
        except Exception as e:
            print(f"Failed to set reaction on original message: {e}")

    except Exception as e:
        print(f"[ERROR] Error in handle_reaction: {e}")
        traceback.print_exc()

if __name__ == '__main__':
    init_db()
    init_messages_db()
    asyncio.get_event_loop().create_task(start_channel_switchers())
    executor.start_polling(dp, skip_updates=True)